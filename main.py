import asyncio
from telebot import types
from telebot.async_telebot import AsyncTeleBot
from telebot.formatting import hcite, hitalic, hbold, hlink
from random import choice
import json
from background import keep_alive


with open('db.json', 'r') as file:
    db = json.load(file)

bot = AsyncTeleBot(db['bot_token'])


def get_rating(rating):
    if len(rating) >= 1:
        return f'{sum(rating) / len(rating):.1f}'
    else:
        return "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"


def update_rating(teacher, rating):
    teacher["rating"].append(int(rating))


def get_quote(quote):
    if len(quote) > 0:
        return choice(quote)
    else:
        return "–ù–µ—Ç —Ü–∏—Ç–∞—Ç"


def get_review(review):
    if len(review) > 0:
        return choice(review)
    else:
        return "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤"


def about_teacher_short(full_name, teacher, id, id_teacher):
    kb = types.InlineKeyboardMarkup(row_width=3)
    btn1 = types.InlineKeyboardButton(text='–û—Ü–µ–Ω–∏—Ç—å', callback_data=f"rate_{id_teacher}") if full_name not in \
                                                                                            db["user"][str(id)][
                                                                                                "appreciated"] else None
    btn2 = types.InlineKeyboardButton(text='–û—Ç–∑—ã–≤—ã', callback_data=f"review_0_{id_teacher}")
    btn3 = types.InlineKeyboardButton(text='–¶–∏—Ç–∞—Ç—ã', callback_data=f"quote_0_{id_teacher}")
    kb.add(*[i for i in (btn1, btn2, btn3) if i])
    if str(id) in db["admin"]:
        kb.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å', callback_data=f"edit_{id_teacher}"),
               types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data=f"del_{id_teacher}"))
    kb.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f"back_to_"))

    rating = get_rating(teacher['rating'])
    if rating != "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫":
        if float(rating) <= 4:
            emoji = "üò°"
        elif float(rating) <= 7:
            emoji = "üòê"
        else:
            emoji = "üòé"
    else:
        emoji = '‚ùî'

    return (f"‚Äî {full_name}\n"
            f"‚Äî {hitalic('–ü—Ä–µ–¥–º–µ—Ç:')} {teacher['subject']}\n"
            f"‚Äî {hitalic('–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥:')} {rating} {emoji}\n\n"
            f"{hbold('–°–ª—É—á–∞–π–Ω—ã–π –æ—Ç–∑—ã–≤:')}\n"
            f"{hcite(get_review(teacher['review']))}\n\n"
            f"{hbold('–°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞:')}\n"
            f"{hcite(get_quote(teacher['quote']))}"), teacher['photo'], kb

def update_db():
    with open('db.json', 'w') as file:
        json.dump(db, file)

# –∞–¥–º–∏–Ω—ã: id(—Å—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–æ–º): —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞(bool),
#         –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—è: –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª—è—Ç—å(bool), —Ñ–∏–æ(str), –ø—Ä–µ–¥–º–µ—Ç(str), —Ñ–æ—Ç–æ(str),
#         —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—á–∏—Ç–µ–ª—è: –Ω–∞—á–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å(bool), —Ñ–∏–æ(str), —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å(str)
db["admin"] = {"5285632228": {"first_name":'Alexa',
                              "developer_status": True,
                              "add_teacher": {"start": False, "full_name": '',
                                              "subject": '', "photo": ''},
                              "edit_teacher": {"full_name": '', 'edit': '', 'new': ''},
                              "add_admin": False, 'del_admin': False},
               "950100889": {"first_name":'Hakuuz',
                             "developer_status": False,
                             "add_teacher": {"start": False, "full_name": '',
                                             "subject": '', "photo": ''},
                             "edit_teacher": {"full_name": '', 'edit': '', 'new': ''},
                             "add_admin": False, 'del_admin': False}}

# —é–∑–µ—Ä—ã: id(—Å—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–æ–º): –ø–∏—à–µ—Ç –æ—Ç–∑—ã–≤(bool), –ø–∏—à–µ—Ç —Ü–∏—Ç–∞—Ç—É(bool), —É—á–∏—Ç–µ–ª—å(str),
#                             —Ñ–∏–æ —É—á–∏—Ç–µ–ª—è(str): [–æ—Ü–µ–Ω–∏–ª –ª–∏(bool)...]
db["user"] = {"5285632228": {"first_name":'Alexa', "make_review" : '', "make_quote" : '', "appreciated": [], 'support': False},
              "950100889": {"first_name":'Hakuuz', "make_review" : '', "make_quote" : '', "appreciated": [], 'support': False}}

# —É—á–∏—Ç–µ–ª—è: —Ñ–∏–æ(str): {–ø—Ä–µ–¥–º–µ—Ç(str), —Ñ–æ—Ç–æ(str), —Ä–µ–π—Ç–∏–Ω–≥(—Å–ø–∏—Å–æ–∫ —Å –æ—Ü–µ–Ω–∫–∞–º–∏),
#                    —Ü–∏—Ç–∞—Ç—ã(—Å–ø–∏—Å–æ–∫ —Å —Ü–∏—Ç–∞—Ç–∞–º–∏), –æ—Ç–∑—ã–≤—ã(—Å–ø–∏—Å–æ–∫ —Å –æ—Ç–∑—ã–≤–∞–º–∏), id_teacher(int)}
# db["teacher"] = {}
#
# db["id_teacher"] = {}


# –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã: {—Ñ–∏–æ —É—á–∏—Ç–µ–ª—è(str): [—Ü–∏—Ç–∞—Ç–∞(str)...]}
# db["quote"] = {}

# –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã: {—Ñ–∏–æ —É—á–∏—Ç–µ–ª—è(str): [–æ—Ç–∑—ã–≤(str)...]}
# db["review"] = {}

# –∑–∞–ø—Ä–æ—Å—ã –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {id –∑–∞–ø—Ä–æ—Å–∞(str —Å —á–∏—Å–ª–æ–º): [–∑–∞–ø—Ä–æ—Å(str), id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(str —Å —á–∏—Å–ª–æ–º)]...}
# db["support"] = {}


# Handle '/start' and '/help'
@bot.message_handler(commands=['start', 'help'])
async def send_welcome(message):
    if message.from_user.id not in db["user"]:
        db["user"][str(message.from_user.id)] = {"first_name": message.from_user.first_name, "make_review": "",
                                                 "make_quote": "", "appreciated": [], 'support': False}
        update_db()

    text = ('–ü—Ä–∏–≤–µ—Ç! –ù–∞—à –±–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –ø–æ–ª—É—Ç–æ—Ä–∞ —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–∞–º–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∞ –º–Ω–µ–Ω–∏–π '
            '—É—á–µ–Ω–∏–∫–æ–≤ –Ω–∞—à–µ–π —à–∫–æ–ª—ã (–∏–ª–∏ —É–∂–µ –±—ã–≤—à–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤). –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å '
            '—Å–≤–æ–π –æ—Ç–∑—ã–≤ –Ω–∞ —É—á–∏—Ç–µ–ª—è –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ —Ü–∏—Ç–∞—Ç—É. –ò–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ '
            '–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—á–∏—Ç–µ–ª–µ–π –ø–æ –∫–æ–º–∞–Ω–¥–µ "/view_teacher"\n'
            '–£ –Ω–∞—Å –µ—Å—Ç—å –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å! –ü–æ –∫–æ–º–∞–Ω–¥–µ "/support" –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø—Ä—è–º—É—é '
            '–æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞—à–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º, –∞ –æ–Ω–∏ –≤–∞–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç—è—Ç :)\n'
            '–ù–∞—à–∞ –≥—Ä—É–ø–ø–∞ —Ç–≥: t.me/sc72botgroup')
    await bot.reply_to(message, text)


# –ú–µ–Ω—é —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∞–¥–º–∏–Ω–∞
@bot.message_handler(commands=['admin_menu'])
async def admin_menu(message):
    if str(message.from_user.id) in db["admin"]:
        text = ("/add_teacher - –î–æ–±–∞–≤–∏—Ç—å —É—á–∏—Ç–µ–ª—è\n"
                "/add_admin - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
                "/delete_admin - –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
                "/get_quote - –ü–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
                "/get_review - –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
                "/answer_support - –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —é–∑–µ—Ä–æ–≤\n"
                "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è\n")

    else:
        text = "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º"

    await bot.reply_to(message, text)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
@bot.message_handler(commands=['add_teacher'])
async def add_teacher(message):
    if str(message.from_user.id) in db["admin"]:
        db["admin"][str(message.from_user.id)]["add_teacher"]["start"] = True

        update_db()

        await bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û —É—á–∏—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                                    "–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ")
    else:
        await bot.reply_to(message, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º")


# –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è
@bot.message_handler(commands=['cancel'])
async def cancel(message):
    db["user"][str(message.from_user.id)] = {"first_name": message.from_user.first_name,
                                             "make_review": "", "make_quote": "",
                                             "appreciated": db["user"][str(message.from_user.id)]["appreciated"],
                                             'support': False}
    if str(message.from_user.id) in db['admin']:
        db['admin'][str(message.from_user.id)]["add_teacher"] = {"start": False, "full_name": '', "subject": '',
                                                                 "photo": ''}
        db['admin'][str(message.from_user.id)]["edit_teacher"] = {"full_name": '', 'edit': '', 'new': ''}
        db['admin'][str(message.from_user.id)]["add_admin"] = False
        db['admin'][str(message.from_user.id)]['del_admin'] = False
    update_db()

    await bot.reply_to(message, "–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω—ã!")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏—Ç–∞—Ç/–æ—Ç–∑—ã–≤–æ–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
@bot.message_handler(commands=['get_quote', 'get_review'])
async def get_quote_or_review_for_adm(message):
    if str(message.from_user.id) in db["admin"]:
        comm = message.text[5:]
        kb = types.InlineKeyboardMarkup(row_width=2)
        if len(db[comm]):
            teacher = choice(list(db[comm].keys()))
            dict_q_or_r = choice(db[comm][teacher])
            text = (f'–¶–∏—Ç–∞—Ç–∞ –æ—Ç {teacher}:\n'
                    f'{hcite(dict_q_or_r)}')
            id_teacher = db['teacher'][teacher]['id_teacher']
            q_or_r = db[comm][teacher].index(dict_q_or_r)

            kb.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å", callback_data=f"add_{comm}_{id_teacher}_{q_or_r}"),
                   types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"del_{comm}_{id_teacher}_{q_or_r}"))
        else:
            text = f'–ù–µ—Ç –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö {"—Ü–∏—Ç–∞—Ç" if comm == "quote" else "–æ—Ç–∑—ã–≤–æ–≤"}.'
        await bot.send_message(message.from_user.id, text, parse_mode='HTML', reply_markup=kb)
    else:
        await bot.reply_to(message, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º")


# –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
@bot.message_handler(commands=['add_admin'])
async def add_admin(message):
    if str(message.from_user.id) in db['admin']:
        db['admin'][str(message.from_user.id)]["add_admin"] = True
        text = '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º:'
        for user_id in db['user']:
            if user_id not in db['admin'] and user_id != str(message.from_user.id):
                text = text + '\n' + hlink(db['user'][user_id]['first_name'], f"tg://user?id={user_id}") + f' {user_id}'
        if text == '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º:':
            text = text + '\n' + '–¢–∞–∫–∏—Ö –Ω–µ—Ç. –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.'
            db['admin'][str(message.from_user.id)]["add_admin"] = False

        update_db()

        await bot.send_message(message.from_user.id, text, parse_mode='HTML')
    else:
        await bot.send_message(message.from_user.id,
                               '–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –ø–æ—Å–∫–æ–ª—å–∫—É –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º.')


# –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
@bot.message_handler(commands=['del_admin'])
async def del_admin(message):
    if str(message.from_user.id) in db['admin']:
        db['admin'][str(message.from_user.id)]["del_admin"] = True
        text = '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –∞–¥–º–∏–Ω–æ–≤:'
        for admin_id in db['admin']:
            if admin_id != str(message.from_user.id):
                text = text + '\n' + hlink(db['user'][admin_id]['first_name'],
                                           f"tg://user?id={admin_id}") + f' {admin_id}'

        update_db()

        await bot.send_message(message.from_user.id, text, parse_mode='HTML')
    else:
        await bot.send_message(message.from_user.id, '–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, '
                                                     '–ø–æ—Å–∫–æ–ª—å–∫—É –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º.')


# –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
@bot.message_handler(commands=['support'])
async def support(message):
    db['user'][str(message.from_user.id)]['support'] = True
    await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º, '
                                                 '–∫–∞–∫ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –±–æ—Ç–∞. –ù–∞—à–∏ –∞–¥–º–∏–Ω—ã –æ—Ç–≤–µ—Ç—è—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')
    update_db()


# –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å, –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
@bot.message_handler(commands=['answer_support'])
async def answer_support(message):
    if str(message.from_user.id) in db['admin']:
        if len(db['support']):
            sup = db['support'][min(db['support'])][0]
            await bot.send_message(message.from_user.id, f"support_{min(db['support'])}\n"
                                                         f"{hcite(sup)}\n\n"
                                                         "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —è –ø–µ—Ä–µ—à–ª—é –≤–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
                                   parse_mode="HTML")
        else:
            await bot.send_message(message.from_user.id, '–ù–∏–∫—Ç–æ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.')
    else:
        await bot.send_message(message.from_user.id, '–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, '
                                                     '–ø–æ—Å–∫–æ–ª—å–∫—É –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º.')


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–∏—Ç–µ–ª–µ (–≤—ã–±–æ—Ä —É—á–∏—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞, –∑–∞–ø—É—Å–∫)
@bot.message_handler(commands=['view_teacher'])
async def view_teacher(message):
    teacher = sorted(db["teacher"].keys())
    kb = types.InlineKeyboardMarkup(row_width=3)
    for full_name in teacher[:min(len(teacher), 5)]:
        id_teacher = db["teacher"][full_name]['id_teacher']
        kb.add(types.InlineKeyboardButton(text=full_name, callback_data=f"open_{id_teacher}"))

    if len(teacher) > 5:
        kb.add(types.InlineKeyboardButton(text="1", callback_data="pass"),
               types.InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data="5_view"))
    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–µ—Ç–µ —É—á–∏—Ç–µ–ª—è:", reply_markup=kb)


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–∏—Ç–µ–ª–µ (–≤—ã–±–æ—Ä —É—á–∏—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞, —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
@bot.callback_query_handler(func=lambda callback: "_view" in callback.data)
async def callback_view(callback):
    callback.data = int(callback.data.split('_')[0])
    teacher = sorted(db["teacher"].keys())
    id_teacher = db["teacher"][teacher]['id_teacher']
    kb = types.InlineKeyboardMarkup(row_width=3)

    for full_name in teacher[callback.data:callback.data + min(len(teacher) - callback.data, 5)]:
        kb.add(types.InlineKeyboardButton(text=full_name, callback_data=f"open_{id_teacher}"))

    if len(teacher) > 5:
        btn0 = types.InlineKeyboardButton(text="‚óÄÔ∏è",
                                          callback_data=f"{callback.data - 5}_view") if callback.data >= 5 else None
        btn1 = types.InlineKeyboardButton(text=f"{(callback.data + 5) // 5}", callback_data="pass")
        btn2 = types.InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"{callback.data + 5}_view") if len(
            teacher) - callback.data > 5 else None
        kb.add(*[i for i in (btn0, btn1, btn2) if i])
    await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                                text="–í—ã–±–µ—Ä–µ—Ç–µ —É—á–∏—Ç–µ–ª—è:", reply_markup=kb)


# –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —É—á–∏—Ç–µ–ª–µ–π
@bot.callback_query_handler(func=lambda callback: "back_to_" in callback.data)
async def callback_back_to_(callback):
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)
    callback.chat = callback.message.chat
    await view_teacher(callback)


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–∏—Ç–µ–ª–µ (–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–∏—Ç–µ–ª—è)
@bot.callback_query_handler(func=lambda callback: "open_" in callback.data or "back_" in callback.data)
async def callback_open(callback):
    id_teacher = callback.data[5:]
    full_name = db["id_teacher"][id_teacher]
    teacher = db["teacher"][full_name]
    text, photo, kb = about_teacher_short(full_name, teacher, callback.message.chat.id, id_teacher)

    await bot.delete_message(callback.message.chat.id, callback.message.message_id)
    await bot.send_photo(callback.message.chat.id, photo, text, parse_mode='HTML', reply_markup=kb)


# –û—Ü–µ–Ω–∏—Ç—å —É—á–∏—Ç–µ–ª—è –æ—Ç 1 –¥–æ 10 (–≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ—á–µ–∫)
@bot.callback_query_handler(func=lambda callback: "rate_" in callback.data)
async def callback_rate(callback):
    id_teacher = callback.data[5:]
    kb = types.InlineKeyboardMarkup(row_width=5)
    kb.add(
        *[types.InlineKeyboardButton(text=str(i), callback_data=f"rating_{i}_{id_teacher}") for i in range(1, 11)])

    await bot.edit_message_reply_markup(chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                                        reply_markup=kb)


# –û—Ü–µ–Ω–∏—Ç—å —É—á–∏—Ç–µ–ª—è –æ—Ç 1 –¥–æ 10 (–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑), –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
@bot.callback_query_handler(func=lambda callback: "rating_" in callback.data)
async def callback_rating(callback):
    rate, id_teacher = callback.data[7:].split("_")
    full_name = db["id_teacher"][id_teacher]
    teacher = db["teacher"][full_name]
    update_rating(teacher, rate)
    db["user"][str(callback.message.chat.id)]["appreciated"].append(full_name)

    kb = types.InlineKeyboardMarkup(row_width=2)
    btn2 = types.InlineKeyboardButton(text='–û—Ç–∑—ã–≤—ã', callback_data=f"review_0_{id_teacher}")
    btn3 = types.InlineKeyboardButton(text='–¶–∏—Ç–∞—Ç—ã', callback_data=f"quote_0_{id_teacher}")
    kb.add(btn2, btn3)

    update_db()

    callback.data = f'open_{id_teacher}'
    await callback_open(callback)
    await bot.send_message(callback.message.chat.id, "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ—Ü–µ–Ω–∫—É ‚ù§Ô∏è")


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã/–æ—Ç–∑—ã–≤–∞, –æ—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
@bot.callback_query_handler(func=lambda callback: "OK_" in callback.data or "off_" in callback.data)
async def callback_confirmation(callback):
    action, comm, id_teacher = callback.data.split('_')
    full_name = db["id_teacher"][id_teacher]
    db["user"][str(callback.message.chat.id)]["make_" + comm] = ''
    await bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id)
    if action == "OK":
        if full_name not in db[comm]:
            db[comm][full_name] = []
        db[comm][full_name].append(callback.message.text.split('\n')[1])

        update_db()

        await bot.send_message(callback.message.chat.id,
                               f'–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ {"–æ—Ç–∑—ã–≤" if comm == "review" else "—Ü–∏—Ç–∞—Ç—É"} ‚ù§Ô∏è\n'
                               f'–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º {"–µ–≥–æ" if comm == "review" else "–µ—ë"} –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é, –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Ü–µ–Ω–∑—É—Ä—É.')
    else:
        await bot.send_message(callback.message.chat.id, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    callback.data = f'open_{id_teacher}'
    await callback_open(callback)


# –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ / –î–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É
@bot.callback_query_handler(func=lambda callback: "make_" in callback.data)
async def callback_make_review_or_quote(callback):
    comm, id_teacher = callback.data.split("_")[1], callback.data.split("_")[2]
    full_name = db["id_teacher"][id_teacher]
    db["user"][str(callback.message.chat.id)]["make_review" if comm == "review" else "make_quote"] = full_name

    update_db()

    await bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id)
    await bot.send_message(callback.message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ {"–æ—Ç–∑—ã–≤" if comm == "review" else "—Ü–∏—Ç–∞—Ç—É"}:')


# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ü–∏—Ç–∞—Ç/–æ—Ç–∑—ã–≤–æ–≤. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Ö –¥–æ–±–∞–≤–∏—Ç—å
@bot.callback_query_handler(func=lambda callback: ("review_" in callback.data or "quote_" in callback.data) and
                                                  "del" not in callback.data and "add" not in callback.data)
async def callback_review_or_quote(callback):
    comm, num, id_teacher = callback.data.split("_")[0], int(callback.data.split("_")[1]), callback.data.split("_")[2]
    full_name = db["id_teacher"][id_teacher]
    lst = db["teacher"][full_name][comm]

    kb = types.InlineKeyboardMarkup(row_width=3)
    btn0 = types.InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"{comm}_{num - 1}_{id_teacher}") \
        if num != 0 and len(lst) > 0 else None
    btn1 = types.InlineKeyboardButton(text=str(num + 1), callback_data="pass") if len(lst) > 0 else None
    btn2 = types.InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"{comm}_{num + 1}_{id_teacher}") \
        if num != len(lst) - 1 and len(lst) > 0 else None
    kb.add(*[i for i in (btn0, btn1, btn2) if i])
    kb.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨Ö", callback_data=f"back_{id_teacher}"),
           types.InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤" if comm == 'review' else "–î–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É",
                                      callback_data=f"make_{comm}_{id_teacher}"))

    text = (f"{'–û—Ç–∑—ã–≤—ã –Ω–∞' if comm == 'review' else '–¶–∏—Ç–∞—Ç—ã –æ—Ç'} {full_name}:\n"
            f"{hcite(lst[num]) if len(lst) > 0 else hitalic('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å.')}")

    await bot.edit_message_caption(chat_id=callback.message.chat.id,
                                   message_id=callback.message.message_id,
                                   caption=text, reply_markup=kb, parse_mode='HTML')


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø—Ä–æ—Ñ–∏–ª–µ —É—á–∏—Ç–µ–ª—è
@bot.callback_query_handler(func=lambda callback: "save_edit_" in callback.data)
async def callback_save_edit(callback):
    id = str(callback.message.chat.id)
    full_name = db["admin"][id]["edit_teacher"]['full_name']
    id_teacher = db["teacher"][full_name]['id_teacher']
    edit = {'–§–ò–û': 'full_name', '–ü—Ä–µ–¥–º–µ—Ç': "subject", "–§–æ—Ç–æ": "photo"}[db["admin"][id]["edit_teacher"]['edit']]
    new_obj = db['admin'][id]['edit_teacher']['new']
    db['admin'][id]['edit_teacher']['full_name'] = ''
    db['admin'][id]['edit_teacher']['edit'] = ''
    await bot.edit_message_reply_markup(chat_id=callback.message.chat.id, message_id=callback.message.message_id)

    if 'dont' not in callback.data:
        if edit == "full_name":
            db["teacher"][new_obj.title()] = db["teacher"][full_name]
            db["id_teacher"][str(id_teacher)] = new_obj.title()
            if new_obj.title() in db['quote']:
                db['quote'][new_obj.title()] = db['quote'][full_name]
            if new_obj.title() in db['review']:
                db['review'][new_obj.title()] = db['review'][full_name]
            del db["teacher"][full_name]
        else:
            db['teacher'][full_name][edit] = new_obj

        callback.data = f'open_{id_teacher}'
        await callback_open(callback)
        await bot.send_message(int(id), '‚Üë –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã ‚Üë')
    else:
        await bot.send_message(int(id), '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    update_db()


# –ó–∞–ø—Ä–æ—Å: –Ω–∞ —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ —É —É—á–∏—Ç–µ–ª—è
@bot.callback_query_handler(func=lambda callback: "_editing_" in callback.data)
async def callback_editing(callback):
    obj, _, id_teacher = callback.data.split("_")
    full_name = db["id_teacher"][id_teacher]
    text = f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ ({obj}):"
    db['admin'][str(callback.message.chat.id)]['edit_teacher']['full_name'] = full_name
    db['admin'][str(callback.message.chat.id)]['edit_teacher']['edit'] = obj

    update_db()

    await bot.edit_message_reply_markup(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    await bot.send_message(callback.message.chat.id, text)


# –ó–∞–ø—Ä–æ—Å: –∫–∞–∫–∏–µ –∏–∑–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ —É —É—á–∏—Ç–µ–ª—è
@bot.callback_query_handler(func=lambda callback: "edit_" in callback.data)
async def callback_edit(callback):
    id_teacher = callback.data[5:]
    if db['admin'][str(callback.message.chat.id)]['edit_teacher']['full_name']:
        db['admin'][str(callback.message.chat.id)]['edit_teacher']['full_name'] = ''
        db['admin'][str(callback.message.chat.id)]['edit_teacher']['edit'] = ''

        update_db()

    text = "–í—ã–±–µ—Ä–µ—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    kb = types.InlineKeyboardMarkup(row_width=3)
    kb.add(*[types.InlineKeyboardButton(text=f"{i}", callback_data=f"{i}_editing_{id_teacher}") for i in
             ('–§–ò–û', "–ü—Ä–µ–¥–º–µ—Ç", "–§–æ—Ç–æ")])

    await bot.edit_message_reply_markup(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    await bot.send_message(callback.message.chat.id, text, reply_markup=kb)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã/–æ—Ç–∑—ã–≤–∞, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —é–∑–µ—Ä–æ–º (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
@bot.callback_query_handler(func=lambda callback: "add_quote_" in callback.data or "add_review_" in callback.data)
async def callback_add_q_or_r(callback):
    _, comm, id_teacher, q_or_r = callback.data.split("_")
    teacher = db["id_teacher"][id_teacher]
    q_or_r = db[comm][teacher].pop(int(q_or_r))
    db['teacher'][teacher][comm].append(q_or_r)

    update_db()

    await bot.edit_message_reply_markup(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    await bot.send_message(callback.message.chat.id,
                           ("–¶–∏—Ç–∞—Ç–∞ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞" if comm == 'quote' else "–û—Ç–∑—ã–≤ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω") +
                           f" —É—á–∏—Ç–µ–ª—é {hitalic(teacher)}", parse_mode='HTML')


# –£–¥–∞–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã/–æ—Ç–∑—ã–≤–∞, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —é–∑–µ—Ä–æ–º (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
@bot.callback_query_handler(func=lambda callback: "del_quote_" in callback.data or "del_review_" in callback.data)
async def callback_del_q_or_r(callback):
    _, comm, id_teacher, q_or_r = callback.data.split("_")
    teacher = db["id_teacher"][id_teacher]
    del db[comm][teacher][int(q_or_r)]

    update_db()

    await bot.edit_message_reply_markup(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    await bot.send_message(callback.message.chat.id, "–¶–∏—Ç–∞—Ç–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞." if comm == 'quote' else "–û—Ç–∑—ã–≤ –±—ã–ª —É–¥–∞–ª–µ–Ω.")


# –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–º–µ–Ω–∞ (–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –∫–Ω–æ–ø–æ–∫: —É–¥–∞–ª–∏—Ç—å/–Ω–µ —É–¥–∞–ª—è—Ç—å)
@bot.callback_query_handler(func=lambda callback: "delete_" in callback.data)
async def callback_delete(callback):
    if 'dont' not in callback.data:
        full_name = db["id_teacher"][callback.data[7:]]
        del db["teacher"][full_name]
        del db["id_teacher"][callback.data[7:]]
        if full_name in db['quote']:
            del db['quote'][full_name]
        if full_name in db['review']:
            del db['review'][full_name]
        text = "–£—á–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω."

        update_db()

    else:
        text = "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    await bot.edit_message_reply_markup(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    await bot.send_message(callback.message.chat.id, text)


# –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–º–µ–Ω–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫: —É–¥–∞–ª–∏—Ç—å/–Ω–µ —É–¥–∞–ª—è—Ç—å)
@bot.callback_query_handler(func=lambda callback: "del_" in callback.data)
async def callback_del(callback):
    full_name = db["id_teacher"][int(callback.data[4:])]
    text = f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–∏—Ç—å —É—á–∏—Ç–µ–ª—è {hbold(full_name)} ?'
    kb = types.InlineKeyboardMarkup(row_width=3)
    kb.add(types.InlineKeyboardButton(text="–î–∞", callback_data=f'delete_{callback.data[4:]}'),
           types.InlineKeyboardButton(text="–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞!", callback_data='dont_delete_'))

    await bot.edit_message_reply_markup(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    await bot.send_message(callback.message.chat.id, text, parse_mode='HTML', reply_markup=kb)


# Handle all other messages with content_type 'text' (content_types defaults to ['text'])
@bot.message_handler(func=lambda message: True, content_types=["text", "photo"])
async def text_processing(message):
    text = ''
    id = str(message.from_user.id)
    if id in db["user"]:
        # –Ω–∞–ø–∏—Å–∞—Ç—å —Ü–∏—Ç–∞—Ç—É/–æ—Ç–∑—ã–≤
        if db["user"][id]["make_review"] or db["user"][id]["make_quote"]:
            comm = "review" if db["user"][id]["make_review"] else "quote"
            id_teacher = db['teacher'][db["user"][id]["make_review"] or db["user"][id]["make_quote"]]['id_teacher']

            kb = types.InlineKeyboardMarkup(row_width=2)
            kb.add(types.InlineKeyboardButton(text="OK", callback_data=f'OK_{comm}_'
                                                                       f'{id_teacher}'),
                   types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f'make_{comm}_'
                                                                             f'{id_teacher}'),
                   types.InlineKeyboardButton(
                       text=f"–£–¥–∞–ª–∏—Ç—å –∏ –Ω–µ {'–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤' if comm == 'review' else '–¥–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É'}",
                       callback_data=f'off_{comm}_{id_teacher}'))
            text = (f"–í–∞—à{' –æ—Ç–∑—ã–≤' if comm == 'review' else '—É —Ü–∏—Ç–∞—Ç—É'} –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å —Ç–∞–∫:\n"
                    f"{hcite(message.text)}\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ {'–µ–≥–æ' if comm == 'review' else '–µ—ë'} –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å.\n"
                    f"–ù–∞–∂–∞–≤ {hitalic('OK')}, –≤—ã —É–∂–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –Ω–∏—á–µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å!")
            await bot.send_message(message.chat.id, text, parse_mode='HTML', reply_markup=kb)
            text = ''

        # –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
        elif db['user'][id]['support']:
            if len(db['support']) > 0:
                db['support'][str(max([int(i) for i in db['support']]) + 1)] = [message.text, str(message.from_user.id)]
            else:
                db['support']['1'] = [message.text, str(message.from_user.id)]

            db['user'][id]['support'] = False
            await bot.send_message(message.chat.id, '–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å ‚ù§Ô∏è\n'
                                                    '–ü–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–æ–≤
    if id in db["admin"]:

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—è
        if db["admin"][id]["add_teacher"]["start"]:
            shortcut = db["admin"][id]["add_teacher"]
            if message.photo and shortcut["full_name"] and shortcut["subject"]:
                shortcut["photo"] = message.photo[0].file_id
                shortcut["start"] = False

                n = int(max(list(db["id_teacher"].keys()))) + 1 if len(db["id_teacher"]) > 0 else 0
                db["id_teacher"][str(n)] = shortcut["full_name"]

                db["teacher"][shortcut["full_name"]] = {'subject': shortcut["subject"],
                                                        'photo': message.photo[0].file_id,
                                                        'rating': [], 'quote': [], 'review': [],
                                                        "id_teacher": str(n)}
                text, photo, kb = about_teacher_short(shortcut["full_name"],
                                                      db["teacher"][shortcut["full_name"]], id, str(n))
                await bot.send_photo(message.chat.id, photo, text, parse_mode='HTML', reply_markup=kb)

                shortcut["full_name"], shortcut["subject"], shortcut["photo"] = "", "", ""
                text = "‚Üë –£—á–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω! ‚Üë"

            elif not shortcut["full_name"] and ("".join(message.text.split())).isalpha() and len(
                    message.text.split()) == 3:
                shortcut["full_name"] = " ".join(message.text.split()).title()

                text = "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç —É—á–∏—Ç–µ–ª—è"

            elif not shortcut["subject"] and ("".join(message.text.split())).isalpha() and shortcut["full_name"]:
                shortcut["subject"] = " ".join(message.text.split())
                text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –û–î–ù–û —Ñ–æ—Ç–æ —É—á–∏—Ç–µ–ª—è"

            else:
                text = ("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n\n"
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö: \n"
                        "–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ (–≤ 3 —Å–ª–æ–≤–∞, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã)\n"
                        "–ü—Ä–µ–¥–º–µ—Ç (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã)\n"
                        "–§–æ—Ç–æ (–Ω–µ –±–æ–ª–µ–µ 1 —Ñ–æ—Ç–æ)")

        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—á–∏—Ç–µ–ª—è
        elif db["admin"][id]["edit_teacher"]['full_name']:
            shortcut = db["admin"][id]["edit_teacher"]
            shortcut['new'] = message.text if not message.photo else message.photo[0].file_id
            if shortcut['edit'] != '–§–ò–û' or message.text.title() not in db['teacher']:
                if shortcut['edit'] == '–§–ò–û':
                    shortcut["new"] = shortcut["new"].title()
                if not message.photo:
                    text = (
                        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å {hitalic(shortcut['edit'])} —É —É—á–∏—Ç–µ–ª—è {hitalic(shortcut['full_name'])} –Ω–∞:\n"
                        f'{hbold(shortcut["new"])} ?')
                else:
                    text = f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å {hitalic('–§–æ—Ç–æ')} —É —É—á–∏—Ç–µ–ª—è {hitalic(shortcut['full_name'])} –Ω–∞ –¥–∞–Ω–Ω–æ–µ ‚Üë ?\n"

                kb = types.InlineKeyboardMarkup(row_width=3)
                kb.add(types.InlineKeyboardButton(text="–î–∞", callback_data='save_edit_'),
                       types.InlineKeyboardButton(text="–ù–µ—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                                                  callback_data=f'edit_{db["teacher"][shortcut["full_name"]]["id_teacher"]}'),
                       types.InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è—Ç—å", callback_data=f"dont_save_edit_"))

                await bot.send_message(message.from_user.id, text, parse_mode='HTML', reply_markup=kb)
                text = ''
            else:
                text = "–≠—Ç–æ—Ç —É—á–∏—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –§–ò–û"

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        elif db['admin'][id]["add_admin"]:
            if message.text in db['user']:
                db['admin'][id]["add_admin"] = False
                db['admin'][message.text] = {"first_name": db['user'][message.text]['first_name'],
                                             "developer_status": False,
                                             "add_teacher": {"start": False, "full_name": '',
                                                             "subject": '', "photo": ''},
                                             "edit_teacher": {"full_name": '', 'edit': '', 'new': ''},
                                             "add_admin": False, 'del_admin': False}

                await bot.send_message(message.from_user.id,
                                       f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " +
                                       hlink(db['user'][message.text]['first_name'], f"tg://user?id={message.text}") +
                                       " —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω.", parse_mode='HTML')
                await bot.send_message(message.text,
                                       "–í—ã —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω! –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –º–µ–Ω—è /admin_menu –∏ –µ—â—ë –º–Ω–æ–≥–æ –≤—Å–µ–≥–æ!")
            else:
                text = '–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ï–≥–æ –Ω–µ–ª—å–∑—è —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑.'

        # –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        elif db['admin'][id]["del_admin"]:
            if message.text in db['admin']:
                db['admin'][id]["del_admin"] = False
                del db['admin'][message.text]

                await bot.send_message(message.from_user.id,
                                       f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " +
                                       hlink(db['user'][message.text]['first_name'], f"tg://user?id={message.text}") +
                                       " –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω.", parse_mode='HTML')
            else:
                text = '–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ï–≥–æ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∏–∑ –∞–¥–º–∏–Ω–æ–≤. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑.'

        # –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        elif message.reply_to_message and message.reply_to_message.text.startswith('support_'):
            num_mess = message.reply_to_message.text.split('\n')[0][8:]
            if num_mess in db['support']:
                id_chat = db['support'][num_mess][1]
                await bot.send_message(id_chat, '–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n' + hcite(
                    db['support'][num_mess][0]) + '\n\n' + f'{message.text}', parse_mode='HTML')
                await bot.send_message(message.from_user.id, '–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!')
                del db['support'][num_mess]

    if text:
        await bot.reply_to(message, text)
    update_db()


async def main():
    await bot.polling(non_stop=True)



# keep_alive()
asyncio.run(main())